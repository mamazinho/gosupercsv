// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Writer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetData provides a mock function with given fields:
func (_m *Writer) GetData() (*bytes.Buffer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func() (*bytes.Buffer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *bytes.Buffer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteHeaders provides a mock function with given fields: headers
func (_m *Writer) WriteHeaders(headers []string) error {
	ret := _m.Called(headers)

	if len(ret) == 0 {
		panic("no return value specified for WriteHeaders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(headers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteLine provides a mock function with given fields: values
func (_m *Writer) WriteLine(values map[string]string) error {
	ret := _m.Called(values)

	if len(ret) == 0 {
		panic("no return value specified for WriteLine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = rf(values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteLines provides a mock function with given fields: values
func (_m *Writer) WriteLines(values []map[string]string) error {
	ret := _m.Called(values)

	if len(ret) == 0 {
		panic("no return value specified for WriteLines")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]map[string]string) error); ok {
		r0 = rf(values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWriter creates a new instance of Writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Writer {
	mock := &Writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
